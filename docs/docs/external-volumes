--------------------------------------------------------------
title: Stateful Applications Using External Persistent Volumes
--------------------------------------------------------------

# Stateful Applications Using External Persistent Volumes

<div class="alert alert-danger" role="alert">
  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span> Adapted in Marathon Version 1.0 <br/>
  The Persistent Storage functionality is considered beta, so use this feature at your own risk. We might add, change, or delete any functionality described in this document.
</div>

Marathon applications normally lose their state when they terminate and are relaunched. In some contexts, for instance, if your application uses MySQL, youâ€™ll want your application to preserve its state. You can use an external storage service, such as Amazon's Elastic Block Store (EBS), to create a persistent volume that follows your application instance.

Using an external storage service allows your apps to be more fault-tolerant. If a host fails, Marathon reschedules it on another host, along with its associated data, without user intervention.

# Specifying an External Volume

If you are running Marathon on DCOS, add the following to the `genconf/config.yml` file you use during DCOS installation. [Learn more](https://docs.mesosphere.com/concepts/installing/installing-enterprise-edition/configuration-parameters/).

- `rexray_config_method: file`

- `rexray_config_filename: /path/to/rexray.yaml`

## Scaling your App

Apps that use external volumes should only be scaled to a single instance.

If you scale your app down to 0 instances, the volume is unattached from the agent where it was mounted, but it is not deleted. If you scale your app up again, the data that had been associated with it will still be available.

## Create an Application with External Volumes

### Using a Mesos Container

You specify an external volume in the app definition of your Marathon app. [Learn more about Marathon application definitions](application-basics.html).

```json
{
  "id": "hello",
  "instances": 1,
  "cpus": 0.1,
  "mem": 32,
  "cmd": "while [ true ] ; do touch /tmp/test-rexray-volume/hello ; sleep 5 ; done",
  "container": {
    "type": "MESOS",
    "volumes": [
      {
        "containerPath": "/tmp/test-rexray-volume",
        "persistent": {
          "size": 100,
          "name": "jdef-test-vol",
          "provider": "external",
          "options": { "external/driver": "rexray" }
          },
        "mode": "RW"
      }
    ]
  },
  "upgradeStrategy": {
    "minimumHealthCapacity": 0,
    "maximumOverCapacity": 0
  }
}
```

In the `volumes` section of app definition above:

- `containerPath` specifies the root path inside the volume for storing data. This path is configurable, but defaults to `data/`. See [the REX-Ray documentation on root paths](https://rexray.readthedocs.org/en/v0.3.2/user-guide/config/#volume-root-path-031) for more information.

- The `external/driver` options specifies which Docker volume driver we want to use for storage. If you are running Marathon on DCOS, this value should always be `rexray`. [Learn more about REX-ray](https://rexray.readthedocs.org/en/v0.3.2/user-guide/schedulers/).

- `name` is the name by which your Docker volume driver looks up your volume. When your task is staged on an agent, the volume driver queries the storage service for a volume with this name. If one does not exist, it's created. Otherwise, the existing volume is re-used.

- Volumes will always be available under `$REXRAY_HOME/var/lib/rexray/volumes/$DVDI_VOLUME_NAME`. **Note:** This applies only to non-Docker apps; Docker apps can specify the mount point inside the app definition. See [the REX-Ray documentation on data directories](https://rexray.readthedocs.org/en/v0.3.2/user-guide/config/#data-directories) for more information.

### Using a Docker Container

Below is a sample app definition that uses a Docker container and specifies an external volume:

```json
{
  "id": "/test-docker",
  "instances": 1,
  "cpus": 0.1,
  "mem": 32,
  "cmd": "/usr/bin/tail -f /dev/null",
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "alpine:3.1",
      "network": "HOST",
      "forcePullImage": true
    },
    "volumes": [
      {
        "containerPath": "/data/test-rexray-volume",
        "persistent": {
          "size": 100,
          "name": "test",
          "provider": "external",
          "options": { "external/driver": "rexray" } 
        },
        "mode": "RW"
      }
    ]
  },
  "upgradeStrategy": {
    "minimumHealthCapacity": 0,
    "maximumOverCapacity": 0
  }
}
```

For more information, refer to the [REX-Ray documentation](https://rexray.readthedocs.org/en/v0.3.2/user-guide/schedulers/#docker-containerizer-with-marathon).

## Potential Pitfalls

- Your storage provider may have particular limitations. For instance, on Amazon's EBS, you can only assign one task per volume.

- The volumes you create are not automatically cleaned up. If you you delete your cluster, go to your storage provider and delete the volumes you no longer need. Find them by searching by `DVDI_VOLUME_NAME`.

- Volumes are not isolated from other clusters. Choose a unique volume name to avoid conflicts.

- Docker apps do not support external volumes on DCOS installations running Docker older than 1.8. Currently, this means that DCOS Community Edition users cannot create Docker apps with external volumes.

For more information, see the [Apache Mesos documentation on persistent volumes](http://mesos.apache.org/documentation/latest/persistent-volume/).
